<template>
<div>
  <div class="container p-5">
    {{externalUserID}}
    <div class="control">
      <div class="button" @click="launchWebSdk">KYC</div>
      <div id="sumsub-websdk-container"></div>
    </div>
  </div>  
</div>  
</template>

<script>
import snsWebSdk from '@sumsub/websdk';
import { ethers } from 'ethers';
import axios from 'axios';
import crypto from "crypto"



export default {
  name: "SumSub",
  data() {
    return {
      accessToken: process.env.VUE_APP_SUMSUB_TOKEN,
      levelName: 'basic-kyc-level',
      ttlInSecs: 600,
      config: {
        baseUrl: "https://api.sumsub.com"
      }
    }
  },
  computed: {
    externalUserID() {
    const address = "0xe4e1aEF9c352a6A56e39f502612cA88a3441CFA5"
    const encoded = ethers.utils.defaultAbiCoder.encode(["address", "string"],[address, "WEAV"])
    return ethers.utils.id(encoded)
    }
  },
  methods: {
    // https://developers.sumsub.com/api-reference/#access-tokens-for-sdks
    createAccessToken () {
      console.log("Creating an access token for initializng SDK...");
    
      var method = 'post';
      var url = `/resources/accessTokens?userId=${this.externalUserID}&ttlInSecs=${this.ttlInSecs}&levelName=${this.levelName}`;
    
      var headers = {
          'Accept': 'application/json',
          'X-App-Token': this.accessToken
      };
    
      this.config.method = method;
      this.config.url = url;
      this.config.headers = headers;
      this.config.data = {};
    
     
    },
    createSignature() {
      console.log('Creating a signature for the request...');
      var ts = Math.floor(Date.now() / 1000);
      const signature = crypto.createHmac('sha256',  process.env.VUE_APP_SUMSUB_SECRET_KEY);
      
      signature.update(ts +this.config.method.toUpperCase() +this.config.url);
      // signature.update(this.config.data || {});
      this.config.headers['X-App-Access-Ts'] = ts;
      this.config.headers['X-App-Access-Sig'] = signature.digest('hex'); 
    },

    async createApplicant() {
      const response = await axios(this.createApplicant(this.externalUserID, this.levelName))
      .then(function (response) {
        console.log("Response:\n", response);
        return response;
      })
      .catch(function (error) {
        console.log("Error:\n", error.response);
      });
    }, 
    launchWebSdk() {
      let snsWebSdkInstance = snsWebSdk.init(
              this.accessToken,
              
              // token update callback, must return Promise
              // Access token expired
              // get a new one and pass it to the callback to re-initiate the WebSDK
              (newAccessToken) => this.getNewAccessToken(newAccessToken)
          ).withBaseUrl(this.baseUrl)
          .withConf({
              lang: 'en', //language of WebSDK texts and comments (ISO 639-1 format)
              
          })
          .withOptions({ addViewportTag: false, adaptIframeHeight: true})
          // see below what kind of messages WebSDK generates
          .on('idCheck.stepCompleted', (payload) => {
              console.log('stepCompleted', payload)
          })
          .on('idCheck.onError', (error) => {
              console.log('onError', error)
          })
          .build();

      // you are ready to go:
      // just launch the WebSDK by providing the container element for it
      // snsWebSdkInstance.launch('#sumsub-websdk-container')
    },
    getNewAccessToken(newAccessToken) {
      return Promise.resolve(newAccessToken)// get a new token from your backend
    }
  },
  mounted() {
    // axios.interceptors.request.use(this.createSignature, function (error) {
    //     return Promise.reject(error);
    // })
    // const response = new Promise( (res, rej) =>  axios(this.createApplicant(this.externalUserID, this.levelName))
    // .then(function (response) {
    //   console.log("Response:\n", response.data);
    //   res(response);
    // })
    // .catch(function (error) {
    //   console.log("Error:\n", error.response.data);
    //   rej(error.response.data)
    // }))
    // this.createAccessToken()    
    // this.createSignature()
  }
}

// /**
//  * @param accessToken - access token that you generated on the backend in Step 2
//  * @param applicantEmail - applicant email (not required)
//  * @param applicantPhone - applicant phone, if available (not required)
//  * @param customI18nMessages - customized locale messages for current session (not required)
//  */
// function launchWebSdk(accessToken, applicantEmail, applicantPhone, customI18nMessages) {
//     let snsWebSdkInstance = snsWebSdk.init(
//             accessToken,
//             // token update callback, must return Promise
//             // Access token expired
//             // get a new one and pass it to the callback to re-initiate the WebSDK
//             () => this.getNewAccessToken()
//         )
//         .withConf({
//             lang: 'en', //language of WebSDK texts and comments (ISO 639-1 format)
//             email: applicantEmail,
//             phone: applicantPhone,
//             i18n: customI18nMessages, //JSON of custom SDK Translations
//             uiConf: {
//                 customCss: "https://url.com/styles.css"
//                 // URL to css file in case you need change it dynamically from the code
//                 // the similar setting at Customizations tab will rewrite customCss
//                 // you may also use to pass string with plain styles `customCssStr:`
//             },
//         })
//         .withOptions({ addViewportTag: false, adaptIframeHeight: true})
//         // see below what kind of messages WebSDK generates
//         .on('idCheck.stepCompleted', (payload) => {
//             console.log('stepCompleted', payload)
//         })
//         .on('idCheck.onError', (error) => {
//             console.log('onError', error)
//         })
//         .build();

//     // you are ready to go:
//     // just launch the WebSDK by providing the container element for it
//     snsWebSdkInstance.launch('#sumsub-websdk-container')
// }

// function getNewAccessToken() {
//   return Promise.resolve(newAccessToken)// get a new token from your backend
// }
</script>

<style>

</style>

